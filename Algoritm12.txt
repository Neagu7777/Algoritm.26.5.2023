Реализуйте и оцените алгоритм поиска максимального числа в неотсортированном массиве (объясните почему именно такая оценка).
 Реализовать можно как в виде текста, псевдокода или блок-схемы, так и в виде реального кода.

Алгоритм поиска максимального числа в неотсортированном массиве:

1. Инициализировать переменную max значением, меньшим любого возможного элемента в массиве (например, Integer.MIN_VALUE).
2. Проходить по каждому элементу массива.
    a. Если текущий элемент больше значения переменной max, обновить max значением текущего элемента.
3. max теперь содержит максимальное число в массиве.

Оценка алгоритма:
- Временная сложность: O(n), где n - количество элементов в массиве. В худшем случае, мы должны проверить каждый элемент.
- Пространственная сложность: O(1), так как используется только константное количество дополнительной памяти.

Этот алгоритм эффективен для небольших или неупорядоченных массивов, но может столкнуться с проблемами при работе с очень 
большими массивами из-за линейной зависимости от их размера.

Реальный код на языке Java:

public class MaxNumberFinder {
    public static int findMaxNumber(int[] array) {
        if (array == null || array.length == 0) {
            throw new IllegalArgumentException("Input array is empty or null");
        }

        int max = Integer.MIN_VALUE;
        for (int num : array) {
            if (num > max) {
                max = num;
            }
        }

        return max;
    }

    public static void main(String[] args) {
        int[] numbers = {5, 8, 2, 11, 9, 4, 7};
        int maxNumber = findMaxNumber(numbers);
        System.out.println("Максимальное число в массиве: " + maxNumber);
    }
}

В данном примере предполагается, что массив не пуст и не содержит null элементов. В реальном коде, возможно, 
потребуется добавить дополнительные проверки и обработку крайних случаев в зависимости от конкретных требований.

